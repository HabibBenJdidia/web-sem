# Test Video Analyzer - PowerShell Script
# Tests the video analyzer functionality

Write-Host "========================================" -ForegroundColor Cyan
Write-Host "  TEST ANALYSEUR VIDEO AI (AISALHI)" -ForegroundColor Cyan
Write-Host "========================================" -ForegroundColor Cyan
Write-Host ""

# Variables
$API_BASE_URL = "http://localhost:8000"
$FRONTEND_URL = "http://localhost:5173"

# Function to test endpoint availability
function Test-EndpointAvailability {
    Write-Host "üîç Test de disponibilit√© de l'endpoint..." -ForegroundColor Yellow
    
    try {
        $response = Invoke-WebRequest -Uri "$API_BASE_URL/ai/analyze-video" -Method OPTIONS -TimeoutSec 5 -ErrorAction SilentlyContinue
        Write-Host "‚úÖ Endpoint disponible (Status: $($response.StatusCode))" -ForegroundColor Green
        return $true
    }
    catch {
        Write-Host "‚ùå Endpoint non disponible" -ForegroundColor Red
        Write-Host "üí° V√©rifiez que le backend est d√©marr√© avec: docker-compose up -d" -ForegroundColor Yellow
        return $false
    }
}

# Function to test with video file
function Test-VideoUpload {
    param (
        [string]$VideoPath = "test_video.webm"
    )
    
    Write-Host "`nüé• Test d'upload et analyse vid√©o..." -ForegroundColor Yellow
    
    if (-not (Test-Path $VideoPath)) {
        Write-Host "‚ö†Ô∏è  Fichier vid√©o non trouv√©: $VideoPath" -ForegroundColor Yellow
        Write-Host "üí° Cr√©ez un fichier de test ou utilisez l'interface web pour tester" -ForegroundColor Cyan
        return
    }
    
    Write-Host "‚úÖ Fichier trouv√©: $VideoPath" -ForegroundColor Green
    $fileSize = (Get-Item $VideoPath).Length
    Write-Host "üìä Taille: $fileSize bytes" -ForegroundColor Cyan
    
    Write-Host "`nüöÄ Envoi de la requ√™te..." -ForegroundColor Yellow
    Write-Host "‚è≥ Analyse en cours (peut prendre 15-30 secondes)..." -ForegroundColor Cyan
    
    try {
        # Prepare multipart form data
        $boundary = [System.Guid]::NewGuid().ToString()
        $LF = "`r`n"
        
        # Read video file
        $videoBytes = [System.IO.File]::ReadAllBytes($VideoPath)
        
        # Build multipart body
        $bodyLines = @(
            "--$boundary",
            "Content-Disposition: form-data; name=`"video`"; filename=`"test_video.webm`"",
            "Content-Type: video/webm",
            "",
            [System.Text.Encoding]::Latin1.GetString($videoBytes),
            "--$boundary",
            "Content-Disposition: form-data; name=`"message`"",
            "",
            "Test d'analyse vid√©o - D√©tecte l'ambiance et recommande des √©v√©nements",
            "--$boundary--"
        )
        
        $body = $bodyLines -join $LF
        
        $response = Invoke-RestMethod -Uri "$API_BASE_URL/ai/analyze-video" `
            -Method POST `
            -ContentType "multipart/form-data; boundary=$boundary" `
            -Body ([System.Text.Encoding]::Latin1.GetBytes($body)) `
            -TimeoutSec 60
        
        Write-Host "`n‚úÖ SUCC√àS - Analyse termin√©e !" -ForegroundColor Green
        Write-Host "========================================" -ForegroundColor Green
        
        # Display vibe analysis
        if ($response.vibe_analysis) {
            Write-Host "`nüé≠ ANALYSE DE L'AMBIANCE" -ForegroundColor Cyan
            Write-Host "----------------------------------------" -ForegroundColor Gray
            
            if ($response.vibe_analysis.mood) {
                Write-Host "  Ambiance: $($response.vibe_analysis.mood)" -ForegroundColor White
            }
            
            if ($response.vibe_analysis.keywords) {
                $keywords = $response.vibe_analysis.keywords -join ", "
                Write-Host "  Mots-cl√©s: $keywords" -ForegroundColor White
            }
            
            if ($response.vibe_analysis.visual_description) {
                Write-Host "`n  Description visuelle:" -ForegroundColor White
                Write-Host "    $($response.vibe_analysis.visual_description)" -ForegroundColor Gray
            }
            
            if ($response.vibe_analysis.audio_description) {
                Write-Host "`n  Description audio:" -ForegroundColor White
                Write-Host "    $($response.vibe_analysis.audio_description)" -ForegroundColor Gray
            }
        }
        
        # Display event recommendations
        if ($response.event_recommendations -and $response.event_recommendations.Count -gt 0) {
            Write-Host "`n`nüéâ RECOMMANDATIONS D'√âV√âNEMENTS" -ForegroundColor Cyan
            Write-Host "----------------------------------------" -ForegroundColor Gray
            
            $i = 1
            foreach ($event in $response.event_recommendations) {
                $eventName = if ($event.event_name) { $event.event_name } else { $event.name }
                Write-Host "`n  $i. $eventName" -ForegroundColor Yellow
                
                if ($event.event_type) {
                    Write-Host "     Type: $($event.event_type)" -ForegroundColor White
                }
                
                if ($event.match_score) {
                    Write-Host "     Score: $($event.match_score)%" -ForegroundColor Green
                }
                
                if ($event.description) {
                    Write-Host "     Description: $($event.description)" -ForegroundColor Gray
                }
                
                $reason = if ($event.why_similar) { $event.why_similar } else { $event.reason }
                if ($reason) {
                    Write-Host "     Pourquoi: $reason" -ForegroundColor Cyan
                }
                
                $i++
            }
        }
        
        # Display confidence score
        if ($response.confidence_score) {
            Write-Host "`n`nüìä NIVEAU DE CONFIANCE: $($response.confidence_score)%" -ForegroundColor Magenta
        }
        
        Write-Host "`n========================================" -ForegroundColor Green
        
    }
    catch {
        Write-Host "`n‚ùå ERREUR" -ForegroundColor Red
        Write-Host "Message: $($_.Exception.Message)" -ForegroundColor Red
        
        if ($_.ErrorDetails.Message) {
            try {
                $errorJson = $_.ErrorDetails.Message | ConvertFrom-Json
                Write-Host "D√©tails: $($errorJson.error)" -ForegroundColor Yellow
            }
            catch {
                Write-Host "D√©tails: $($_.ErrorDetails.Message)" -ForegroundColor Yellow
            }
        }
    }
}

# Function to check Docker containers
function Test-DockerContainers {
    Write-Host "`nüê≥ V√©rification des conteneurs Docker..." -ForegroundColor Yellow
    
    try {
        $containers = docker ps --format "table {{.Names}}\t{{.Status}}" | Select-String "web-sem"
        
        if ($containers) {
            Write-Host "‚úÖ Conteneurs actifs:" -ForegroundColor Green
            $containers | ForEach-Object { Write-Host "   $_" -ForegroundColor Cyan }
        }
        else {
            Write-Host "‚ö†Ô∏è  Aucun conteneur web-sem actif" -ForegroundColor Yellow
            Write-Host "üí° D√©marrez avec: docker-compose up -d" -ForegroundColor Cyan
        }
    }
    catch {
        Write-Host "‚ùå Docker n'est pas disponible ou non d√©marr√©" -ForegroundColor Red
    }
}

# Main execution
Write-Host "üìã TESTS PR√âLIMINAIRES" -ForegroundColor Cyan
Write-Host "========================================" -ForegroundColor Gray

# Check Docker
Test-DockerContainers

# Check endpoint
Write-Host ""
$endpointAvailable = Test-EndpointAvailability

# Test video upload if endpoint is available
if ($endpointAvailable) {
    Test-VideoUpload
}

# Display manual test instructions
Write-Host "`n========================================" -ForegroundColor Cyan
Write-Host "üìã INSTRUCTIONS POUR TEST MANUEL" -ForegroundColor Cyan
Write-Host "========================================" -ForegroundColor Gray
Write-Host ""
Write-Host "1. Ouvrez $FRONTEND_URL/dashboard/video-analyzer" -ForegroundColor White
Write-Host "2. Autorisez l'acc√®s √† la cam√©ra et au microphone" -ForegroundColor White
Write-Host "3. Enregistrez une vid√©o courte (10-30 secondes)" -ForegroundColor White
Write-Host "4. Ajoutez un message optionnel" -ForegroundColor White
Write-Host "5. Cliquez sur 'Analyser avec l'IA'" -ForegroundColor White
Write-Host "6. Attendez les r√©sultats (15-30 secondes)" -ForegroundColor White
Write-Host ""
Write-Host "üí° ID√âES DE TESTS:" -ForegroundColor Yellow
Write-Host "   ‚ú® Vid√©o festive (musique, danse)" -ForegroundColor Cyan
Write-Host "   üåø Vid√©o calme (nature, paysage)" -ForegroundColor Cyan
Write-Host "   üèÉ Vid√©o d'activit√© (sport, randonn√©e)" -ForegroundColor Cyan
Write-Host "   üé® Vid√©o culturelle (art, exposition)" -ForegroundColor Cyan
Write-Host ""

# Offer to open browser
Write-Host "========================================" -ForegroundColor Cyan
$openBrowser = Read-Host "Voulez-vous ouvrir l'interface dans le navigateur? (O/N)"

if ($openBrowser -eq "O" -or $openBrowser -eq "o") {
    Write-Host "üåê Ouverture du navigateur..." -ForegroundColor Green
    Start-Process "$FRONTEND_URL/dashboard/video-analyzer"
}

Write-Host "`n‚úÖ Tests termin√©s!" -ForegroundColor Green
Write-Host "========================================" -ForegroundColor Cyan
