#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Test de l'endpoint d'analyse vid√©o
Ce script teste l'endpoint /ai/analyze-video en cr√©ant une vid√©o de test
"""

import requests
import io
import json

def test_video_endpoint():
    """Test l'endpoint d'analyse vid√©o avec un fichier simul√©"""
    
    # URL de l'endpoint
    url = "http://localhost:8000/ai/analyze-video"
    
    print("üé¨ Test de l'endpoint d'analyse vid√©o...")
    print(f"URL: {url}\n")
    
    # Cr√©er un fichier vid√©o simul√© (donn√©es binaires minimales)
    # En r√©alit√©, Gemini a besoin d'une vraie vid√©o WebM, mais on teste la structure
    video_data = b'\x1a\x45\xdf\xa3'  # Header WebM minimal
    
    # Cr√©er un fichier en m√©moire
    video_file = io.BytesIO(video_data)
    video_file.name = 'test_video.webm'
    
    # Pr√©parer les fichiers pour l'upload
    files = {
        'video': ('recording.webm', video_file, 'video/webm')
    }
    
    try:
        # Envoyer la requ√™te
        print("üì§ Envoi de la vid√©o de test...")
        response = requests.post(url, files=files, timeout=30)
        
        print(f"‚úÖ Status Code: {response.status_code}")
        print(f"‚úÖ Headers: {dict(response.headers)}\n")
        
        # Afficher la r√©ponse
        if response.status_code == 200:
            data = response.json()
            print("üìä R√©ponse de l'API:")
            print(json.dumps(data, indent=2, ensure_ascii=False))
            
            # V√©rifier la structure
            if 'vibe' in data and 'recommendations' in data:
                print("\n‚úÖ Structure de r√©ponse valide!")
                print(f"   - Vibe d√©tect√©: {len(data['vibe'].get('emotions', []))} √©motions")
                print(f"   - Recommandations: {len(data['recommendations'])} √©v√©nements")
            else:
                print("\n‚ö†Ô∏è  Structure de r√©ponse incompl√®te")
                
        else:
            print(f"‚ùå Erreur HTTP {response.status_code}")
            print(f"R√©ponse: {response.text}")
            
    except requests.exceptions.ConnectionError:
        print("‚ùå Erreur de connexion - Le serveur est-il d√©marr√©?")
    except requests.exceptions.Timeout:
        print("‚ùå Timeout - L'analyse prend trop de temps")
    except Exception as e:
        print(f"‚ùå Erreur: {str(e)}")

def test_video_endpoint_without_file():
    """Test l'endpoint sans fichier pour v√©rifier la validation"""
    
    url = "http://localhost:8000/ai/analyze-video"
    
    print("\n\nüß™ Test de validation (sans fichier)...")
    print(f"URL: {url}\n")
    
    try:
        response = requests.post(url, timeout=10)
        print(f"Status Code: {response.status_code}")
        print(f"R√©ponse: {response.json()}")
        
        if response.status_code == 400:
            print("‚úÖ Validation correcte - Erreur 400 attendue")
        else:
            print("‚ö†Ô∏è  Code de statut inattendu")
            
    except Exception as e:
        print(f"‚ùå Erreur: {str(e)}")

if __name__ == "__main__":
    print("=" * 70)
    print("TEST DE L'ENDPOINT D'ANALYSE VID√âO")
    print("=" * 70 + "\n")
    
    # Test 1: Avec fichier vid√©o
    test_video_endpoint()
    
    # Test 2: Sans fichier (validation)
    test_video_endpoint_without_file()
    
    print("\n" + "=" * 70)
    print("TESTS TERMIN√âS")
    print("=" * 70)
