[
  {
    "projectId": "34d65ba5-c22a-4858-9a3f-cad0e81bde30",
    "testId": "f64fdbde-0538-49a6-9cb4-2ac50659bdc4",
    "userId": "f4b834a8-c0f1-7047-60cf-211f31919abf",
    "title": "TC001-create_empreinte_carbone_entry",
    "description": "Test the POST /api/empreinte_carbone endpoint to ensure it successfully creates a new EmpreinteCarbone entry when provided with a valid carbon emission value. Verify that the response status is 201 and the response body confirms creation.",
    "code": "import requests\n\nBASE_URL = \"http://localhost:8000\"\nTIMEOUT = 30\n\ndef test_create_empreinte_carbone_entry():\n    url = f\"{BASE_URL}/api/empreinte_carbone\"\n    payload = {\n        \"valeur_co2_kg\": 12.34\n    }\n    headers = {\n        \"Content-Type\": \"application/json\"\n    }\n    try:\n        response = requests.post(url, json=payload, headers=headers, timeout=TIMEOUT)\n        assert response.status_code == 201, f\"Expected status code 201, got {response.status_code}\"\n        json_response = response.json()\n        assert \"valeur_co2_kg\" in json_response, \"Response JSON missing 'valeur_co2_kg' key\"\n        assert isinstance(json_response[\"valeur_co2_kg\"], (int, float)), \"'valeur_co2_kg' is not a number\"\n        assert json_response[\"valeur_co2_kg\"] == payload[\"valeur_co2_kg\"], \"Returned 'valeur_co2_kg' does not match the input value\"\n    except requests.RequestException as e:\n        assert False, f\"Request failed: {e}\"\n\ntest_create_empreinte_carbone_entry()",
    "testStatus": "PASSED",
    "testError": "",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-10-29T10:09:08.878Z",
    "modified": "2025-10-29T10:09:19.627Z"
  },
  {
    "projectId": "34d65ba5-c22a-4858-9a3f-cad0e81bde30",
    "testId": "e1c41617-3e74-422c-92ac-bbcddd05690e",
    "userId": "f4b834a8-c0f1-7047-60cf-211f31919abf",
    "title": "TC002-retrieve_all_empreinte_carbone_entries",
    "description": "Test the GET /api/empreinte_carbone endpoint to retrieve all EmpreinteCarbone entries. Verify that the response status is 200 and the response body contains a list of entries.",
    "code": "import requests\n\nBASE_URL = \"http://localhost:8000\"\nTIMEOUT = 30\n\ndef test_retrieve_all_empreinte_carbone_entries():\n    url = f\"{BASE_URL}/api/empreinte_carbone\"\n    try:\n        response = requests.get(url, timeout=TIMEOUT)\n        response.raise_for_status()\n    except requests.exceptions.RequestException as e:\n        assert False, f\"Request failed: {e}\"\n\n    assert response.status_code == 200, f\"Expected status code 200, got {response.status_code}\"\n    try:\n        data = response.json()\n    except ValueError:\n        assert False, \"Response is not valid JSON\"\n\n    assert isinstance(data, list), f\"Expected response body to be a list, got {type(data)}\"\n\ntest_retrieve_all_empreinte_carbone_entries()",
    "testStatus": "PASSED",
    "testError": "",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-10-29T10:09:08.883Z",
    "modified": "2025-10-29T10:09:29.651Z"
  },
  {
    "projectId": "34d65ba5-c22a-4858-9a3f-cad0e81bde30",
    "testId": "952e55e2-dd13-4c6d-b173-7acd98af9ca1",
    "userId": "f4b834a8-c0f1-7047-60cf-211f31919abf",
    "title": "TC003-retrieve_single_empreinte_carbone_entry",
    "description": "Test the GET /api/empreinte_carbone/{id} endpoint with a valid ID to retrieve a specific EmpreinteCarbone entry. Verify that the response status is 200 and the response body contains the correct entry data.",
    "code": "import requests\n\nBASE_URL = \"http://localhost:8000\"\nHEADERS = {\"Content-Type\": \"application/json\"}\nTIMEOUT = 30\n\ndef test_retrieve_single_empreinte_carbone_entry():\n    create_url = f\"{BASE_URL}/api/empreinte_carbone\"\n    sample_payload = {\"valeur_co2_kg\": 42.0}\n\n    # Create a new resource first to have a valid ID for retrieval\n    response_create = requests.post(create_url, json=sample_payload, headers=HEADERS, timeout=TIMEOUT)\n    assert response_create.status_code == 201, f\"Failed to create resource, status code: {response_create.status_code}\"\n    created_entry = response_create.json()\n    # Assume the response returns the created resource with an 'id' field\n    entry_id = created_entry.get(\"id\")\n    assert entry_id is not None, \"Created resource does not have an 'id' field\"\n\n    get_url = f\"{BASE_URL}/api/empreinte_carbone/{entry_id}\"\n    try:\n        response_get = requests.get(get_url, headers=HEADERS, timeout=TIMEOUT)\n        assert response_get.status_code == 200, f\"GET request failed with status code {response_get.status_code}\"\n        retrieved_entry = response_get.json()\n        # Validate that the retrieved entry matches the created data\n        assert retrieved_entry.get(\"id\") == entry_id, \"The retrieved entry ID does not match the requested ID\"\n        assert \"valeur_co2_kg\" in retrieved_entry, \"The retrieved entry does not contain 'valeur_co2_kg'\"\n        # Check if 'valeur_co2_kg' can be converted to a float and matches the original\n        try:\n            valeur_co2 = float(retrieved_entry[\"valeur_co2_kg\"])\n        except (ValueError, TypeError):\n            assert False, \"'valeur_co2_kg' is not a number\"\n        assert valeur_co2 == sample_payload[\"valeur_co2_kg\"], \"Carbon emission value does not match\"\n    finally:\n        # Clean up: delete the created resource\n        delete_url = f\"{BASE_URL}/api/empreinte_carbone/{entry_id}\"\n        requests.delete(delete_url, headers=HEADERS, timeout=TIMEOUT)\n\ntest_retrieve_single_empreinte_carbone_entry()\n",
    "testStatus": "PASSED",
    "testError": "",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-10-29T10:09:08.888Z",
    "modified": "2025-10-29T10:09:36.480Z"
  },
  {
    "projectId": "34d65ba5-c22a-4858-9a3f-cad0e81bde30",
    "testId": "b4a2a267-4dc1-4e88-b4de-3832700c1a80",
    "userId": "f4b834a8-c0f1-7047-60cf-211f31919abf",
    "title": "TC004-retrieve_single_empreinte_carbone_entry_invalid_id",
    "description": "Test the GET /api/empreinte_carbone/{id} endpoint with an invalid or nonexistent ID. Verify that the response status is 404 and the response body indicates that the entry was not found.",
    "code": "import requests\n\nBASE_URL = \"http://localhost:8000\"\nTIMEOUT = 30\n\ndef test_retrieve_single_empreinte_carbone_entry_invalid_id():\n    invalid_id = \"nonexistent-id-12345\"\n    url = f\"{BASE_URL}/api/empreinte_carbone/{invalid_id}\"\n    try:\n        response = requests.get(url, timeout=TIMEOUT)\n        assert response.status_code == 404, f\"Expected status code 404 but got {response.status_code}\"\n        json_response = response.json()\n        # The response body should indicate the entry was not found. \n        # We check for common keys/messages.\n        assert (\n            \"not found\" in response.text.lower() or \n            \"error\" in json_response or \n            \"message\" in json_response or \n            \"detail\" in json_response\n        ), \"Response body does not indicate that the entry was not found.\"\n    except requests.RequestException as e:\n        assert False, f\"Request failed: {e}\"\n\ntest_retrieve_single_empreinte_carbone_entry_invalid_id()",
    "testStatus": "PASSED",
    "testError": "",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-10-29T10:09:08.894Z",
    "modified": "2025-10-29T10:09:22.495Z"
  },
  {
    "projectId": "34d65ba5-c22a-4858-9a3f-cad0e81bde30",
    "testId": "8c8b79f8-2ffa-431b-a10e-c9615fcbafb7",
    "userId": "f4b834a8-c0f1-7047-60cf-211f31919abf",
    "title": "TC005-update_empreinte_carbone_entry",
    "description": "Test the PUT /api/empreinte_carbone/{id} endpoint to update an existing EmpreinteCarbone entry with a new carbon emission value. Verify that the response status is 200 and the response body confirms the update.",
    "code": "import requests\n\nBASE_URL = \"http://localhost:8000\"\nTIMEOUT = 30\n\ndef test_update_empreinte_carbone_entry():\n    # First, create a new EmpreinteCarbone entry to update\n    create_url = f\"{BASE_URL}/api/empreinte_carbone\"\n    create_payload = {\"valeur_co2_kg\": 10.5}\n    created_id = None\n\n    try:\n        create_response = requests.post(create_url, json=create_payload, timeout=TIMEOUT)\n        assert create_response.status_code == 201, f\"Expected 201 on creation but got {create_response.status_code}\"\n        create_data = create_response.json()\n        # Try to find the id in the response; assume it contains the created resource including its id\n        # Find an identifier key in create_data; guessing 'id' or '_id'\n        # Fallback: if no id field, fail\n        if isinstance(create_data, dict):\n            if \"id\" in create_data:\n                created_id = create_data[\"id\"]\n            elif \"_id\" in create_data:\n                created_id = create_data[\"_id\"]\n            else:\n                # If no id, try to get from Location header\n                location = create_response.headers.get(\"Location\")\n                if location and location.strip():\n                    created_id = location.rstrip(\"/\").split(\"/\")[-1]\n        assert created_id, \"Created resource ID not found in response.\"\n\n        # Prepare update payload with a new carbon emission value\n        update_url = f\"{BASE_URL}/api/empreinte_carbone/{created_id}\"\n        update_payload = {\"valeur_co2_kg\": 20.75}\n\n        update_response = requests.put(update_url, json=update_payload, timeout=TIMEOUT)\n        assert update_response.status_code == 200, f\"Expected 200 on update but got {update_response.status_code}\"\n\n        update_data = update_response.json()\n        # Confirm that response body confirms the update, e.g. contains updated value or success message\n        assert isinstance(update_data, dict), \"Update response is not a JSON object\"\n        # Check updated value present and correct in response, if returned\n        # If response contains the updated resource or message\n        valeur = update_data.get(\"valeur_co2_kg\")\n        if valeur is not None:\n            assert abs(valeur - update_payload[\"valeur_co2_kg\"]) < 1e-6, \"Updated valeur_co2_kg does not match\"\n        else:\n            # Otherwise, check a success message or confirmation field\n            success_message = update_data.get(\"message\") or update_data.get(\"detail\") or \"\"\n            assert \"update\" in success_message.lower() or \"success\" in success_message.lower(), \"Update confirmation missing in response\"\n\n    finally:\n        # Cleanup: delete the created entry if it was created\n        if created_id:\n            delete_url = f\"{BASE_URL}/api/empreinte_carbone/{created_id}\"\n            try:\n                requests.delete(delete_url, timeout=TIMEOUT)\n            except Exception:\n                pass\n\n\ntest_update_empreinte_carbone_entry()",
    "testStatus": "PASSED",
    "testError": "",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-10-29T10:09:08.899Z",
    "modified": "2025-10-29T10:09:28.949Z"
  },
  {
    "projectId": "34d65ba5-c22a-4858-9a3f-cad0e81bde30",
    "testId": "82df1627-555f-4d04-bcf8-2e6a79e69d60",
    "userId": "f4b834a8-c0f1-7047-60cf-211f31919abf",
    "title": "TC006-update_empreinte_carbone_entry_invalid_input",
    "description": "Test the PUT /api/empreinte_carbone/{id} endpoint with invalid input data (e.g., missing or non-numeric valeur_co2_kg). Verify that the response status is 400 and the response body indicates invalid input.",
    "code": "import requests\n\nBASE_URL = \"http://localhost:8000\"\nTIMEOUT = 30\nHEADERS = {\"Content-Type\": \"application/json\"}\n\ndef test_update_empreinte_carbone_entry_invalid_input():\n    # First create a valid resource to update\n    create_payload = {\"valeur_co2_kg\": 10.5}\n    create_response = requests.post(f\"{BASE_URL}/api/empreinte_carbone\", json=create_payload, headers=HEADERS, timeout=TIMEOUT)\n    assert create_response.status_code == 201\n    created_data = create_response.json()\n    resource_id = created_data.get(\"id\")\n    assert resource_id is not None\n\n    try:\n        # Test updating with missing 'valeur_co2_kg' (empty payload)\n        invalid_payloads = [\n            {},  # missing valeur_co2_kg\n            {\"valeur_co2_kg\": None},  # null valeur_co2_kg\n            {\"valeur_co2_kg\": \"not-a-number\"},  # non-numeric valeur_co2_kg\n            {\"valeur_co2_kg\": \"\"}  # empty string valeur_co2_kg\n        ]\n        for payload in invalid_payloads:\n            response = requests.put(f\"{BASE_URL}/api/empreinte_carbone/{resource_id}\", json=payload, headers=HEADERS, timeout=TIMEOUT)\n            assert response.status_code == 400\n            resp_json = response.json()\n            assert any(keyword in str(resp_json).lower() for keyword in [\"invalid\", \"error\", \"valeur_co2_kg\"])\n    finally:\n        # Clean up by deleting the created resource\n        requests.delete(f\"{BASE_URL}/api/empreinte_carbone/{resource_id}\", headers=HEADERS, timeout=TIMEOUT)\n\ntest_update_empreinte_carbone_entry_invalid_input()",
    "testStatus": "PASSED",
    "testError": "",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-10-29T10:09:08.904Z",
    "modified": "2025-10-29T10:09:26.752Z"
  },
  {
    "projectId": "34d65ba5-c22a-4858-9a3f-cad0e81bde30",
    "testId": "0b125f67-0f94-4987-91ea-65cefc5c53c3",
    "userId": "f4b834a8-c0f1-7047-60cf-211f31919abf",
    "title": "TC007-update_empreinte_carbone_entry_invalid_id",
    "description": "Test the PUT /api/empreinte_carbone/{id} endpoint with an invalid or nonexistent ID. Verify that the response status is 404 and the response body indicates that the entry was not found.",
    "code": "import requests\n\nBASE_URL = \"http://localhost:8000\"\nTIMEOUT = 30\n\ndef test_update_empreinte_carbone_entry_invalid_id():\n    invalid_id = \"nonexistent-id-12345\"\n    url = f\"{BASE_URL}/api/empreinte_carbone/{invalid_id}\"\n    payload = {\n        \"valeur_co2_kg\": 50.0\n    }\n    headers = {\n        \"Content-Type\": \"application/json\"\n    }\n    try:\n        response = requests.put(url, json=payload, headers=headers, timeout=TIMEOUT)\n    except requests.RequestException as e:\n        assert False, f\"Request failed: {e}\"\n\n    assert response.status_code == 404, f\"Expected status code 404, got {response.status_code}\"\n    # Assert that response body indicates entry not found\n    # We will check for typical not found keywords in JSON or text response\n    try:\n        resp_json = response.json()\n        assert any(\n            k in resp_json.get(\"message\", \"\").lower() or k in resp_json.get(\"error\", \"\").lower()\n            for k in [\"not found\", \"not exist\", \"does not exist\", \"not found\"]\n        ), f\"Response JSON does not indicate 'not found': {resp_json}\"\n    except ValueError:\n        # If response is not JSON, check text content\n        resp_text = response.text.lower()\n        assert \"not found\" in resp_text or \"does not exist\" in resp_text, f\"Response text does not indicate 'not found': {resp_text}\"\n\ntest_update_empreinte_carbone_entry_invalid_id()",
    "testStatus": "PASSED",
    "testError": "",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-10-29T10:09:08.909Z",
    "modified": "2025-10-29T10:09:32.568Z"
  },
  {
    "projectId": "34d65ba5-c22a-4858-9a3f-cad0e81bde30",
    "testId": "34c61723-9143-43bf-8030-f3f577c8b030",
    "userId": "f4b834a8-c0f1-7047-60cf-211f31919abf",
    "title": "TC008-delete_empreinte_carbone_entry",
    "description": "Test the DELETE /api/empreinte_carbone/{id} endpoint to delete an existing EmpreinteCarbone entry by its ID. Verify that the response status is 200 and the response body confirms deletion.",
    "code": "import requests\n\nBASE_URL = \"http://localhost:8000\"\nTIMEOUT = 30\nHEADERS = {\"Content-Type\": \"application/json\"}\n\n\ndef test_delete_empreinte_carbone_entry():\n    # First create a resource to ensure we have a valid ID to delete\n    create_payload = {\"valeur_co2_kg\": 12.34}\n    response_create = requests.post(f\"{BASE_URL}/api/empreinte_carbone\", json=create_payload, headers=HEADERS, timeout=TIMEOUT)\n    assert response_create.status_code == 201, f\"Creation failed with status {response_create.status_code}\"\n    created_data = response_create.json()\n    # EmpreinteCarbone created successfully should contain an 'id' or similar in response\n    # Since the PRD does not specify the exact response body structure, we assume an 'id' field exists\n    resource_id = created_data.get(\"id\")\n    assert resource_id, \"Created resource ID not present in response\"\n\n    try:\n        # Now test deleting the created resource\n        response_delete = requests.delete(f\"{BASE_URL}/api/empreinte_carbone/{resource_id}\", headers=HEADERS, timeout=TIMEOUT)\n        assert response_delete.status_code == 200, f\"Delete failed with status {response_delete.status_code}\"\n        delete_response = response_delete.json()\n        # Confirm the deletion via response body content - assume it contains a confirmation message or deleted id\n        assert \"deleted\" in str(delete_response).lower() or resource_id in str(delete_response), \"Deletion confirmation missing in response\"\n    finally:\n        # Cleanup: ensure the resource is deleted in case delete request failed\n        requests.delete(f\"{BASE_URL}/api/empreinte_carbone/{resource_id}\", headers=HEADERS, timeout=TIMEOUT)\n\n\ntest_delete_empreinte_carbone_entry()",
    "testStatus": "PASSED",
    "testError": "",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-10-29T10:09:08.914Z",
    "modified": "2025-10-29T10:09:31.847Z"
  },
  {
    "projectId": "34d65ba5-c22a-4858-9a3f-cad0e81bde30",
    "testId": "0a951d9b-f17e-48ad-96fe-874507277473",
    "userId": "f4b834a8-c0f1-7047-60cf-211f31919abf",
    "title": "TC009-delete_empreinte_carbone_entry_invalid_id",
    "description": "Test the DELETE /api/empreinte_carbone/{id} endpoint with an invalid or nonexistent ID. Verify that the response status is 404 and the response body indicates that the entry was not found.",
    "code": "import requests\n\nBASE_URL = \"http://localhost:8000\"\nTIMEOUT = 30\n\ndef test_delete_empreinte_carbone_entry_invalid_id():\n    invalid_id = \"nonexistent-id-12345\"\n    url = f\"{BASE_URL}/api/empreinte_carbone/{invalid_id}\"\n    try:\n        response = requests.delete(url, timeout=TIMEOUT)\n    except requests.RequestException as e:\n        assert False, f\"Request failed: {e}\"\n\n    assert response.status_code == 404, f\"Expected status 404 but got {response.status_code}\"\n    try:\n        body = response.json()\n    except ValueError:\n        assert False, \"Response body is not valid JSON\"\n\n    # Check that response body indicates entry was not found\n    # The exact message is not defined, so check for typical keys or messages\n    not_found_messages = [\n        \"not found\",\n        \"Entry not found\",\n        \"empreinte carbone not found\",\n        \"does not exist\"\n    ]\n    body_str = str(body).lower()\n    assert any(msg in body_str for msg in map(str.lower, not_found_messages)), \\\n        f\"Response body does not indicate entry not found: {body}\"\n\ntest_delete_empreinte_carbone_entry_invalid_id()",
    "testStatus": "PASSED",
    "testError": "",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-10-29T10:09:08.919Z",
    "modified": "2025-10-29T10:09:33.327Z"
  }
]
